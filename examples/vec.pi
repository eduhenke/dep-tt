data Bool : Type where {
  False,
  True
}

data Nat : Type where {
  Zero,
  Succ of (Nat)
}

plus : (a b : Nat) -> Nat
plus = 位a b. case a of {
  Zero -> b,
  Succ a' -> Succ (plus a' b)
}

data Vec (A : Type) (n : Nat) : Type where {
  Nil of [n = 0],
  Cons of (m : Nat) (A) (Vec A m) [n = Succ m]
}

v : Vec Bool 0
v = Nil

v' : Vec Bool 2
v' = Cons 1 False (Cons 0 True Nil)


concat : (A : Type) -> (m n: Nat) -> Vec A m -> Vec A n -> Vec A (plus m n)
concat = 位A m n a b. case a of {
  Nil -> b,
  Cons m' h t -> Cons (plus m' n) h (concat A m' n t b)
}

vmap : (A B : Type) -> (n : Nat) -> (f : (A -> B)) -> Vec A n -> Vec B n
vmap = 位A B n f v. case v of {
  Nil -> Nil,
  Cons n' h t -> Cons n' (f h) (vmap A B n' f t)
}

natv : Vec Nat 2
natv = vmap Bool Nat 2 (位b. case b of {False -> 0, True -> 1}) v'